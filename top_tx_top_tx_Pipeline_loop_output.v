// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_tx_top_tx_Pipeline_loop_output (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        cp_outre_TREADY,
        cp_outim_TREADY,
        temp_out1_M_real_address0,
        temp_out1_M_real_ce0,
        temp_out1_M_real_q0,
        temp_out1_M_imag_address0,
        temp_out1_M_imag_ce0,
        temp_out1_M_imag_q0,
        cp_outre_TDATA,
        cp_outre_TVALID,
        cp_outre_TKEEP,
        cp_outre_TSTRB,
        cp_outre_TLAST,
        cp_outim_TDATA,
        cp_outim_TVALID,
        cp_outim_TKEEP,
        cp_outim_TSTRB,
        cp_outim_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   cp_outre_TREADY;
input   cp_outim_TREADY;
output  [12:0] temp_out1_M_real_address0;
output   temp_out1_M_real_ce0;
input  [15:0] temp_out1_M_real_q0;
output  [12:0] temp_out1_M_imag_address0;
output   temp_out1_M_imag_ce0;
input  [15:0] temp_out1_M_imag_q0;
output  [15:0] cp_outre_TDATA;
output   cp_outre_TVALID;
output  [1:0] cp_outre_TKEEP;
output  [1:0] cp_outre_TSTRB;
output  [0:0] cp_outre_TLAST;
output  [15:0] cp_outim_TDATA;
output   cp_outim_TVALID;
output  [1:0] cp_outim_TKEEP;
output  [1:0] cp_outim_TSTRB;
output  [0:0] cp_outim_TLAST;

reg ap_idle;
reg temp_out1_M_real_ce0;
reg temp_out1_M_imag_ce0;
reg[15:0] cp_outre_TDATA;
reg cp_outre_TVALID;
reg[0:0] cp_outre_TLAST;
reg[15:0] cp_outim_TDATA;
reg cp_outim_TVALID;
reg[0:0] cp_outim_TLAST;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln122_reg_233;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln120_fu_158_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    cp_outre_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    cp_outim_TDATA_blk_n;
wire   [0:0] icmp_ln122_fu_170_p2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] final_out_re_last_2_fu_176_p2;
reg   [0:0] final_out_re_last_2_reg_237;
wire   [63:0] zext_ln125_fu_192_p1;
reg   [13:0] i_fu_72;
wire   [13:0] i_2_fu_164_p2;
wire    ap_loop_init;
reg   [13:0] ap_sig_allocacmp_i_1;
reg   [0:0] final_out_re_last_fu_76;
reg   [0:0] final_out_im_last_fu_80;
reg    ap_block_pp0_stage0_01001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_146;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_tx_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln120_fu_158_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_72 <= i_2_fu_164_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_72 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_fu_170_p2 == 1'd0) & (icmp_ln120_fu_158_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        final_out_im_last_fu_80 <= final_out_re_last_2_fu_176_p2;
        final_out_re_last_fu_76 <= final_out_re_last_2_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_fu_170_p2 == 1'd0) & (icmp_ln120_fu_158_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        final_out_re_last_2_reg_237 <= final_out_re_last_2_fu_176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln120_fu_158_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln122_reg_233 <= icmp_ln122_fu_170_p2;
    end
end

always @ (*) begin
    if (((icmp_ln120_fu_158_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 14'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_72;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_146)) begin
        if ((icmp_ln122_reg_233 == 1'd1)) begin
            cp_outim_TDATA = temp_out1_M_imag_q0;
        end else if ((icmp_ln122_reg_233 == 1'd0)) begin
            cp_outim_TDATA = 16'd0;
        end else begin
            cp_outim_TDATA = 'bx;
        end
    end else begin
        cp_outim_TDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (icmp_ln122_reg_233 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (icmp_ln122_reg_233 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        cp_outim_TDATA_blk_n = cp_outim_TREADY;
    end else begin
        cp_outim_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_146)) begin
        if ((icmp_ln122_reg_233 == 1'd1)) begin
            cp_outim_TLAST = final_out_im_last_fu_80;
        end else if ((icmp_ln122_reg_233 == 1'd0)) begin
            cp_outim_TLAST = final_out_re_last_2_reg_237;
        end else begin
            cp_outim_TLAST = 'bx;
        end
    end else begin
        cp_outim_TLAST = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln122_reg_233 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln122_reg_233 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        cp_outim_TVALID = 1'b1;
    end else begin
        cp_outim_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_146)) begin
        if ((icmp_ln122_reg_233 == 1'd1)) begin
            cp_outre_TDATA = temp_out1_M_real_q0;
        end else if ((icmp_ln122_reg_233 == 1'd0)) begin
            cp_outre_TDATA = 16'd0;
        end else begin
            cp_outre_TDATA = 'bx;
        end
    end else begin
        cp_outre_TDATA = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (icmp_ln122_reg_233 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (icmp_ln122_reg_233 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        cp_outre_TDATA_blk_n = cp_outre_TREADY;
    end else begin
        cp_outre_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_146)) begin
        if ((icmp_ln122_reg_233 == 1'd1)) begin
            cp_outre_TLAST = final_out_re_last_fu_76;
        end else if ((icmp_ln122_reg_233 == 1'd0)) begin
            cp_outre_TLAST = final_out_re_last_2_reg_237;
        end else begin
            cp_outre_TLAST = 'bx;
        end
    end else begin
        cp_outre_TLAST = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln122_reg_233 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln122_reg_233 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        cp_outre_TVALID = 1'b1;
    end else begin
        cp_outre_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_out1_M_imag_ce0 = 1'b1;
    end else begin
        temp_out1_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_out1_M_real_ce0 = 1'b1;
    end else begin
        temp_out1_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln122_reg_233 == 1'd1) & (cp_outre_TREADY == 1'b0)) | ((cp_outim_TREADY == 1'b0) & (icmp_ln122_reg_233 == 1'd1)) | ((cp_outim_TREADY == 1'b0) & (icmp_ln122_reg_233 == 1'd0)) | ((icmp_ln122_reg_233 == 1'd0) & (cp_outre_TREADY == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((icmp_ln122_reg_233 == 1'd1) & (cp_outre_TREADY == 1'b0)) | ((cp_outim_TREADY == 1'b0) & (icmp_ln122_reg_233 == 1'd1)) | ((cp_outim_TREADY == 1'b0) & (icmp_ln122_reg_233 == 1'd0)) | ((icmp_ln122_reg_233 == 1'd0) & (cp_outre_TREADY == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((icmp_ln122_reg_233 == 1'd1) & (cp_outre_TREADY == 1'b0)) | ((cp_outim_TREADY == 1'b0) & (icmp_ln122_reg_233 == 1'd1)) | ((cp_outim_TREADY == 1'b0) & (icmp_ln122_reg_233 == 1'd0)) | ((icmp_ln122_reg_233 == 1'd0) & (cp_outre_TREADY == 1'b0))));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = (((icmp_ln122_reg_233 == 1'd1) & (cp_outre_TREADY == 1'b0)) | ((cp_outim_TREADY == 1'b0) & (icmp_ln122_reg_233 == 1'd1)) | ((cp_outim_TREADY == 1'b0) & (icmp_ln122_reg_233 == 1'd0)) | ((icmp_ln122_reg_233 == 1'd0) & (cp_outre_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((icmp_ln122_reg_233 == 1'd1) & (cp_outre_TREADY == 1'b0)) | ((cp_outim_TREADY == 1'b0) & (icmp_ln122_reg_233 == 1'd1)) | ((cp_outim_TREADY == 1'b0) & (icmp_ln122_reg_233 == 1'd0)) | ((icmp_ln122_reg_233 == 1'd0) & (cp_outre_TREADY == 1'b0)));
end

always @ (*) begin
    ap_condition_146 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign cp_outim_TKEEP = 2'd0;

assign cp_outim_TSTRB = 2'd0;

assign cp_outre_TKEEP = 2'd0;

assign cp_outre_TSTRB = 2'd0;

assign final_out_re_last_2_fu_176_p2 = ((ap_sig_allocacmp_i_1 == 14'd16351) ? 1'b1 : 1'b0);

assign i_2_fu_164_p2 = (ap_sig_allocacmp_i_1 + 14'd1);

assign icmp_ln120_fu_158_p2 = ((ap_sig_allocacmp_i_1 == 14'd16352) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_170_p2 = ((ap_sig_allocacmp_i_1 < 14'd8176) ? 1'b1 : 1'b0);

assign temp_out1_M_imag_address0 = zext_ln125_fu_192_p1;

assign temp_out1_M_real_address0 = zext_ln125_fu_192_p1;

assign zext_ln125_fu_192_p1 = ap_sig_allocacmp_i_1;

endmodule //top_tx_top_tx_Pipeline_loop_output
